generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model questions {
  id            Int             @id @default(autoincrement())
  body          String
  type          question_type
  archived      Boolean?        @default(false)
  category_id   Int
  categories    categories     @relation(fields: [category_id], references: [id])
}


model responses {
  id                   Int         @id @default(autoincrement())
  user_id              String
  timestamp            DateTime
  platform_id          Int
  is_mentoring_session Boolean
  platforms            platforms   @relation(fields: [platform_id], references: [id])
  users                users       @relation(fields: [user_id], references: [id])
  scores               scores[]
}

model users {
  id        String      @id
  user_type user_type?  @default(unknown)
  responses responses[]
  platforms platforms[]

}

model platforms{
  id              Int                    @id @default(autoincrement())
  name            String
  user_id              String
  archived        Boolean?               @default(false)
  user_join_codes user_join_codes?
  responses       responses[]
  categories      categories[]
  users                users       @relation(fields: [user_id], references: [id])

}


model user_join_codes {
  platform_id Int         @id
  code        String
  platforms   platforms @relation(fields: [platform_id], references: [id])
}


model categories {
  id          Int         @id @default(autoincrement())
  platform_id Int        
  type        String
  archived        Boolean?               @default(false)
  questions   questions[]
  platforms   platforms @relation(fields: [platform_id], references: [id])
}

model scores {
  id          Int       @id @default(autoincrement())
  response_id Int      
  score       Int
  responses   responses @relation(fields: [response_id], references: [id])
}

enum question_type {
  likert_scale
}


enum user_type {
  unknown
  admin
  user
}
